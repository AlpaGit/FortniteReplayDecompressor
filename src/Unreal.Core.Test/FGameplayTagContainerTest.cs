using Unreal.Core.Models;
using Xunit;

namespace Unreal.Core.Test
{
    public class FGameplayTagContainerTest
    {
        [Fact]
        public void DeathTagsTest1()
        {
            byte[] rawData = {
                0x30, 0x67, 0x56, 0x73, 0xCA, 0xFD, 0xB4, 0x79, 0xCC, 0xA5, 0x32, 0x6B,
                0x58, 0xE7, 0x8C, 0xE9, 0x8C, 0x5B, 0x34, 0xDF, 0x8C, 0x0F, 0xB6, 0x5F,
                0x80, 0x4D, 0x7E, 0xE3, 0x7E, 0x83, 0x7E, 0xBB, 0x7E, 0x89, 0x52, 0x5F,
                0xF0, 0x6D, 0xD0, 0xC9, 0xBE, 0x55, 0xCE, 0x35, 0xCE, 0x85, 0x7E, 0xC5,
                0x7C
            };

            var reader = new NetBitReader(rawData, 392);
            var deathtags = new FGameplayTagContainer();
            deathtags.Serialize(reader);

            Assert.True(reader.AtEnd());
            Assert.False(reader.IsError);
        }

        [Fact]
        public void DeathTagsTest2()
        {
            byte[] rawData = {
                0x38, 0x67, 0x56, 0x73, 0xCA, 0xFD, 0xB4, 0x79, 0xCC, 0xA5, 0x32, 0x69,
                0x58, 0xE7, 0x8C, 0xE9, 0x8C, 0x5B, 0x34, 0xDF, 0x8C, 0x0F, 0xB6, 0x5F,
                0x80, 0x57, 0x34, 0xD7, 0x14, 0xCF, 0x14, 0x4D, 0x7E, 0xE3, 0x7E, 0x83,
                0x7E, 0xBB, 0x7E, 0xAD, 0xEE, 0x41, 0xBE, 0x71, 0x7E, 0x95, 0x7E, 0xF7,
                0x12, 0xDB, 0x7E, 0x3F, 0xBE, 0xCB, 0x7C, 0xCF, 0x7C
            };

            var reader = new NetBitReader(rawData, 456);
            var deathtags = new FGameplayTagContainer();
            deathtags.Serialize(reader);

            Assert.True(reader.AtEnd());
            Assert.False(reader.IsError);
        }
        
        [Fact]
        public void PoiContainerTest()
        {
            byte[] rawData = {
                0x4C, 0x02, 0x2E, 0x30, 0x02, 0xCB, 0x24, 0x00, 0x04, 0x2E, 0x30, 0x02,
                0xB1, 0x24, 0x00, 0x06, 0x2E, 0x30, 0x02, 0xB3, 0x24, 0x00, 0x08, 0x2E,
                0x30, 0x02, 0xAF, 0x24, 0x00, 0x0A, 0x2E, 0x30, 0x02, 0x67, 0x24, 0x00,
                0x0C, 0x2E, 0x30, 0x02, 0xC1, 0x24, 0x00, 0x0E, 0x2E, 0x30, 0x02, 0x65,
                0x24, 0x00, 0x10, 0x2E, 0x30, 0x02, 0xAD, 0x24, 0x00, 0x12, 0x2E, 0x30,
                0x02, 0xCD, 0x24, 0x00, 0x14, 0x2E, 0x30, 0x02, 0xC9, 0x24, 0x00, 0x16,
                0x2E, 0x30, 0x02, 0xB9, 0x24, 0x00, 0x18, 0x2E, 0x30, 0x02, 0xB5, 0x24,
                0x00, 0x1A, 0x2E, 0x30, 0x02, 0x6F, 0x24, 0x00, 0x1C, 0x2E, 0x30, 0x02,
                0x69, 0x24, 0x00, 0x1E, 0x2E, 0x50, 0x04, 0xB5, 0x24, 0x69, 0x24, 0x00,
                0x20, 0x2E, 0x30, 0x02, 0xBB, 0x24, 0x00, 0x22, 0x2E, 0x30, 0x02, 0xC7,
                0x24, 0x00, 0x24, 0x2E, 0x30, 0x02, 0x71, 0x24, 0x00, 0x26, 0x2E, 0x70,
                0x06, 0xA9, 0x24, 0xCB, 0x22, 0x6F, 0x24, 0x00, 0x28, 0x2E, 0x50, 0x04,
                0xA9, 0x24, 0xCB, 0x22, 0x00, 0x2A, 0x2E, 0x30, 0x02, 0xAB, 0x24, 0x00,
                0x2C, 0x2E, 0x50, 0x04, 0xAB, 0x24, 0x71, 0x24, 0x00, 0x2E, 0x2E, 0x50,
                0x04, 0xCF, 0x24, 0xD1, 0x24, 0x00, 0x30, 0x2E, 0x70, 0x06, 0xCF, 0x24,
                0x95, 0x22, 0xD1, 0x24, 0x00, 0x32, 0x2E, 0x50, 0x04, 0xBB, 0x24, 0x8D,
                0x22, 0x00, 0x34, 0x2E, 0x30, 0x02, 0x8D, 0x22, 0x00, 0x36, 0x2E, 0x50,
                0x04, 0xAB, 0x24, 0x8D, 0x22, 0x00, 0x38, 0x2E, 0x30, 0x02, 0xC3, 0x24,
                0x00, 0x3A, 0x2E, 0x30, 0x02, 0xD1, 0x24, 0x00, 0x3C, 0x2E, 0x30, 0x02,
                0xC5, 0x24, 0x00, 0x3E, 0x2E, 0x30, 0x02, 0xD3, 0x24, 0x00, 0x40, 0x2E,
                0x30, 0x02, 0x6D, 0x24, 0x00, 0x42, 0x2E, 0x50, 0x04, 0xC3, 0x24, 0x6D,
                0x24, 0x00, 0x44, 0x2E, 0x50, 0x04, 0xD3, 0x24, 0x6B, 0x24, 0x00, 0x46,
                0x2E, 0x50, 0x04, 0xC5, 0x24, 0xD3, 0x24, 0x00, 0x48, 0x2E, 0x50, 0x04,
                0x8D, 0x22, 0xBF, 0x24, 0x00, 0x4A, 0x2E, 0x50, 0x04, 0x8D, 0x22, 0x6D,
                0x24, 0x00, 0x4C, 0x2E, 0x30, 0x02, 0xB7, 0x24, 0x00, 0x00
            };


            var reader = new NetBitReader(rawData, 2384);
            var points = new FGameplayTagContainer();
            points.Serialize(reader);

            Assert.True(reader.AtEnd());
            Assert.False(reader.IsError);
        }
    }
}
