using Unreal.Core.Models;
using Xunit;

namespace Unreal.Core.Test
{
    public class FHitResultTest
    {
        [Fact]
        public void HitResultTest()
        {
            byte[] rawData = {
                0xE9, 0xDB, 0xDE, 0xF9, 0x9E, 0x18, 0x4C, 0x1F, 0xD3, 0x05, 0x69, 0x53,
                0xB0, 0x36, 0x65, 0xB2, 0x9B, 0xAD, 0x31, 0x0A, 0xD3, 0xA7, 0x74, 0x41,
                0xDA, 0x14, 0x8C, 0xAE, 0xF4, 0x01, 0x5F, 0x10, 0x37, 0x05, 0x63, 0x52,
                0x7D, 0x0A, 0x14, 0xF4, 0x4C, 0x41, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x05, 0x00, 0x00, 0x00, 0x48, 0x45, 0x41, 0x44, 0x00, 0x00, 0x00,
                0x00, 0x00
            };

            var reader = new NetBitReader(rawData, 496);
            var hitResult = new FHitResult();
            hitResult.Serialize(reader);

            Assert.True(reader.AtEnd());
            Assert.False(reader.IsError);
            Assert.Equal("HEAD", hitResult.BoneName);
        }
        
        [Fact]
        public void HitResultTest2()
        {
            byte[] rawData = {
                0xE9, 0xB0, 0x13, 0x85, 0x1F, 0x48, 0x59, 0xB5, 0x11, 0x50, 0x8B, 0x00,
                0x46, 0xA1, 0x70, 0x71, 0x47, 0x33, 0xC2, 0xCA, 0xAA, 0x8D, 0x80, 0x5A,
                0x04, 0x10, 0x86, 0x53, 0x1D, 0x11, 0x14, 0x26, 0x80, 0x70, 0xC5, 0xEA,
                0xCD, 0x9F, 0x00, 0x01, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x88, 0xD6, 0x09,
                0xA6, 0x53, 0x00, 0x00, 0x00, 0x80, 0x54, 0x14, 0x44, 0x04, 0x00, 0x00,
                0x00, 0x00, 0x00
            };

            var reader = new NetBitReader(rawData, 500);
            var hitResult = new FHitResult();
            hitResult.Serialize(reader);

            Assert.True(reader.AtEnd());
            Assert.False(reader.IsError);
            Assert.Equal("HEAD", hitResult.BoneName);
        }
        
        [Fact]
        public void HitResultTest3()
        {
            byte[] rawData = {
                0x6D, 0x8D, 0xEB, 0x1E, 0x1F, 0xFE, 0xB6, 0x49, 0xEB, 0xBF, 0x91, 0xE4,
                0xFE, 0x83, 0x75, 0xF1, 0x91, 0xF7, 0xF9, 0xC4, 0x3C, 0x71, 0xD4, 0x05,
                0x42, 0xE4, 0xA9, 0x2D, 0x00, 0x00, 0x00, 0x58, 0x13, 0x28, 0x12, 0xC8,
                0x12, 0xE0, 0x00, 0x00, 0x00, 0x20, 0xF6, 0xC5, 0x54, 0x66, 0x46, 0x67,
                0xF4, 0x26, 0x57, 0x16, 0x24, 0xD7, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00
            };


            var reader = new NetBitReader(rawData, 476);
            var hitResult = new FHitResult();
            hitResult.Serialize(reader);

            Assert.True(reader.AtEnd());
            Assert.False(reader.IsError);
            Assert.Equal("b_LeftForeArm", hitResult.BoneName);
        }
    }
}
