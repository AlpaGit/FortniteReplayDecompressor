using System.IO;
using Unreal.Core.Models.Enums;
using Unreal.Core.Test.Mocks;
using Xunit;

namespace Unreal.Core.Test
{
    public class NetFieldExportTest
    {
        [Theory]
        [InlineData(new byte[] {
                0x01, 0x95, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00,
                0x49, 0x74, 0x65, 0x6D, 0x2E, 0x57, 0x65, 0x61, 0x70, 0x6F, 0x6E, 0x2E,
                0x52, 0x61, 0x6E, 0x67, 0x65, 0x64, 0x2E, 0x53, 0x68, 0x6F, 0x74, 0x67,
                0x75, 0x6E, 0x2E, 0x54, 0x61, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6C, 0x00,
                0x00, 0x00, 0x00, 0x00
            })]
        [InlineData(new byte[] {
                0x01, 0x8F, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
                0x57, 0x65, 0x61, 0x70, 0x6F, 0x6E, 0x2E, 0x52, 0x61, 0x6E, 0x67, 0x65,
                0x64, 0x2E, 0x50, 0x69, 0x73, 0x74, 0x6F, 0x6C, 0x2E, 0x53, 0x74, 0x61,
                0x6E, 0x64, 0x61, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00
            })]
        [InlineData(new byte[] {
                0x01, 0x51, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00,
                0x41, 0x74, 0x68, 0x65, 0x6E, 0x61, 0x2E, 0x4C, 0x6F, 0x63, 0x61, 0x74,
                0x69, 0x6F, 0x6E, 0x2E, 0x55, 0x6E, 0x6E, 0x61, 0x6D, 0x65, 0x64, 0x50,
                0x4F, 0x49, 0x2E, 0x43, 0x6C, 0x69, 0x66, 0x66, 0x73, 0x69, 0x64, 0x65,
                0x52, 0x75, 0x69, 0x6E, 0x65, 0x64, 0x48, 0x6F, 0x75, 0x73, 0x65, 0x73,
                0x00, 0x00, 0x00, 0x00, 0x00
            })]
        [InlineData(new byte[] {
                0x01, 0x0A, 0xE4, 0x01, 0xDC, 0xA3, 0x00, 0x13, 0x00, 0x00, 0x00, 0x52,
                0x65, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4D, 0x6F, 0x76,
                0x65, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00
            })]
        public void ReadNetFieldExportTest(byte[] rawData)
        {
            using var ms = new MemoryStream(rawData);
            using var archive = new Unreal.Core.BinaryReader(ms);
            archive.EngineNetworkVersion = EngineNetworkVersionHistory.HISTORY_OPTIONALLY_QUANTIZE_SPAWN_INFO;
            archive.NetworkVersion = NetworkVersionHistory.HISTORY_CHARACTER_MOVEMENT_NOINTERP;
            archive.ReplayHeaderFlags = ReplayHeaderFlags.HasStreamingFixes;

            var reader = new MockReplayReader();
            reader.ReadNetFieldExport(archive);
            Assert.True(archive.AtEnd());
            Assert.False(archive.IsError);
        }
    }
}
